using System.Numerics;
using Content.Client.Construction;
using Content.Client.UserInterface.Controls;
using Content.Shared._White.ShortConstruction;
using Content.Shared.Construction.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Placement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Enums;
using Robust.Shared.Prototypes;

namespace Content.Client._White.ShortConstruction.UI;

[GenerateTypedNameReferences]
public sealed partial class ShortConstructionMenu : RadialMenu
{
    [Dependency] private readonly EntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    [Dependency] private readonly IPlacementManager _placementManager = default!;

    private readonly ConstructionSystem _construction;

    public ShortConstructionMenu(EntityUid owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        _construction = _entManager.System<ConstructionSystem>();

        if (!_entManager.TryGetComponent<ShortConstructionComponent>(owner, out var crafting))
            return;

        var spriteSystem = _entManager.System<SpriteSystem>();
        var main = FindControl<RadialContainer>("Main");

        foreach (var protoId in crafting.Prototypes)
        {
            if (!_protoManager.TryIndex(protoId, out var proto))
                continue;

            var button = new RadialMenuTextureButton
            {
                ToolTip = Loc.GetString(proto.Name),
                StyleClasses = { "RadialMenuButton" },
                SetSize = new Vector2(48f, 48f),
            };

            var texture = new TextureRect
            {
                VerticalAlignment = VAlignment.Center,
                HorizontalAlignment = HAlignment.Center,
                Texture = spriteSystem.Frame0(proto.Icon),
                TextureScale = new Vector2(1.5f, 1.5f),
            };

            button.AddChild(texture);

            button.OnButtonUp += _ =>
            {
                if (ConstructItem(proto))
                    Close();
            };

            main.AddChild(button);
        }
    }

    /// <summary>
    /// Makes an item or places a schematic based on the type of construction recipe.
    /// </summary>
    /// <returns>Whatever the menu should be closed or not. By default crafting items does not close the window</returns>
    private bool ConstructItem(ConstructionPrototype prototype)
    {
        if (prototype.Type == ConstructionType.Item)
        {
            _construction.TryStartItemConstruction(prototype.ID);
            return false;
        }

        _placementManager.BeginPlacing(new PlacementInformation
        {
            IsTile = false,
            PlacementOption = prototype.PlacementMode
        }, new ConstructionPlacementHijack(_construction, prototype));
        return true;
    }
}
