using System.IO;
using System.Linq;
using System.Numerics;
using Content.Client.Administration.UI;
using Content.Client.Humanoid;
using Content.Client.Message;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared._EE.Contractors.Prototypes;
using Content.Shared.CCVar;
using Content.Shared.Clothing.Components;
using Content.Shared.Clothing.Loadouts.Prototypes;
using Content.Shared.Clothing.Loadouts.Systems;
using Content.Shared.Customization.Systems;
using Content.Shared.Dataset;
using Content.Shared.GameTicking;
using Content.Shared.Guidebook;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.StatusIcon;
using Content.Shared.Traits;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Client.Player;
using Robust.Shared.Configuration;
using Robust.Shared.Enums;
using Robust.Shared.Map;
using Robust.Shared.Physics;
using Robust.Shared.Prototypes;
using Robust.Shared.Random;
using Robust.Shared.Utility;
using Content.Shared.Chemistry.Components;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Content.Shared.InteractionVerbs.InteractionPopupPrototype;


namespace Content.Client.Lobby.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class JobPreferenceMenu : BoxContainer
    {
        private readonly IConfigurationManager _cfgManager;
        private readonly IEntityManager _entManager;
        private readonly IPrototypeManager _protoManager;
        private readonly IClientPreferencesManager _preferencesManager;
        //private readonly HumanoidCharacterProfile _profile;
        private readonly CharacterRequirementsSystem _characterRequirementsSystem;
        private readonly JobRequirementsManager _requirements;
        private readonly HumanoidProfileEditor _profileEditor;

        private List<(string, OptionButton, RequirementsSelector)> _jobPriorities = new();
        private readonly Dictionary<string, BoxContainer> _jobCategories;

        public event Action<List<ProtoId<GuideEntryPrototype>>>? OnOpenGuidebook;

        /// The preferences being edited.
        public JobPreferences? Preferences;

        public JobPreferenceMenu(IClientPreferencesManager prefsManager, IConfigurationManager cfgManager, IEntityManager entManager, IPrototypeManager protoManager, JobRequirementsManager requirements, HumanoidProfileEditor profileEditor)
        {
            RobustXamlLoader.Load(this);
            _preferencesManager = prefsManager;
            _cfgManager = cfgManager;
            _entManager = entManager;
            _protoManager = protoManager;
            _characterRequirementsSystem = _entManager.System<CharacterRequirementsSystem>();
            _requirements = requirements;
            _profileEditor = profileEditor;
            _jobCategories = new Dictionary<string, BoxContainer>();

            //Jobs.Orphan();

            PreferenceUnavailableButton.AddItem(
                Loc.GetString(
                    "humanoid-profile-editor-preference-unavailable-stay-in-lobby-button"),
                    (int) PreferenceUnavailableMode.StayInLobby);
            PreferenceUnavailableButton.AddItem(
                Loc.GetString(
                    "humanoid-profile-editor-preference-unavailable-spawn-as-overflow-button",
                    ("overflowJob", Loc.GetString(SharedGameTicker.FallbackOverflowJobName))),
                    (int) PreferenceUnavailableMode.SpawnAsOverflow);

            PreferenceUnavailableButton.OnItemSelected += args =>
            {
                PreferenceUnavailableButton.SelectId(args.Id);

                _profileEditor.Profile = _profileEditor.Profile?.WithPreferenceUnavailable((PreferenceUnavailableMode) args.Id);
                //IsDirty = true;
            };

        }


        /// Refreshes all job selectors
        public void RefreshJobs()
        {
            JobList.DisposeAllChildren();
            _jobCategories.Clear();
            _jobPriorities.Clear();

            // Kill this when proper Preference Jobs are added.
            Preferences = new JobPreferences();
            // Get all displayed departments
            var departments = new List<DepartmentPrototype>();
            foreach (var department in _protoManager.EnumeratePrototypes<DepartmentPrototype>())
            {
                if (department.EditorHidden)
                    continue;

                departments.Add(department);
            }

            departments.Sort(DepartmentUIComparer.Instance);

            var items = new[]
            {
                ("humanoid-profile-editor-job-priority-never-button", (int) JobPriority.Never),
                ("humanoid-profile-editor-job-priority-low-button", (int) JobPriority.Low),
                ("humanoid-profile-editor-job-priority-medium-button", (int) JobPriority.Medium),
                ("humanoid-profile-editor-job-priority-high-button", (int) JobPriority.High),
            };

            var firstCategory = true;
            foreach (var department in departments)
            {
                var departmentName = Loc.GetString($"department-{department.ID}");

                if (!_jobCategories.TryGetValue(department.ID, out var category))
                {
                    category = new AlternatingBGContainer
                    {
                        Orientation = LayoutOrientation.Vertical,
                        Name = department.ID,
                        ToolTip = Loc.GetString("humanoid-profile-editor-jobs-amount-in-department-tooltip",
                            ("departmentName", departmentName)),
                        Margin = new(0, firstCategory ? 0 : 20, 0, 0),
                        Children =
                        {
                            new Label
                            {
                                Text = Loc.GetString("humanoid-profile-editor-department-jobs-label",
                                    ("departmentName", departmentName)),
                                StyleClasses = { StyleBase.StyleClassLabelHeading, },
                                Margin = new(5f, 0, 0, 0),
                            },
                        },
                    };

                    firstCategory = false;
                    _jobCategories[department.ID] = category;
                    JobList.AddChild(category);
                }

                var jobs = department.Roles.Select(jobId => _protoManager.Index<JobPrototype>(jobId))
                    .Where(job => job.SetPreference)
                    .ToArray();

                Array.Sort(jobs, JobUIComparer.Instance);

                foreach (var job in jobs)
                {
                    var jobContainer = new BoxContainer { Orientation = LayoutOrientation.Horizontal, };
                    var selector = new RequirementsSelector { Margin = new(3f, 3f, 3f, 0f) };
                    var jobLoadoutButton = new Button { Text = Loc.GetString("Loadout"), Margin = new(3f, 3f, 3f, 0f), HorizontalAlignment = HAlignment.Right };
                    var characterList = new OptionButton();
                    characterList.AddItem("job-preference-menu-character-none", 0);
                    foreach (var (slot, character) in _preferencesManager.Preferences!.Characters)
                    {
                        int characterJobs = Preferences.CharJobs(slot);
                        // Change this to use the CVar later.
                        characterList.AddItem(character.Name, slot + 1);
                        if (characterJobs > 2)
                            characterList.SetItemDisabled(slot + 1, true);
                    }
                    selector.OnOpenGuidebook += OnOpenGuidebook;

                    var icon = new TextureRect
                    {
                        TextureScale = new(2, 2),
                        VerticalAlignment = VAlignment.Center
                    };
                    var jobIcon = _protoManager.Index<JobIconPrototype>(job.Icon);
                    icon.Texture = jobIcon.Icon.Frame0();
                    selector.Setup(items, job.LocalizedName, 200, job.LocalizedDescription, icon, job.Guides);
                    if (!_requirements.CheckJobWhitelist(job, out var reason))
                        selector.LockRequirements(reason);
                    else if (!_characterRequirementsSystem.CheckRequirementsValid(
                         job.Requirements ?? new(),
                         job,
                         _profileEditor.Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                         _requirements.GetRawPlayTimeTrackers(),
                         _requirements.IsWhitelisted(),
                         job,
                         _entManager,
                         _protoManager,
                         _cfgManager,
                         out var reasons))
                        selector.LockRequirements(_characterRequirementsSystem.GetRequirementsText(reasons));
                    else if (!_requirements.CheckCharacterAssigned(job, Preferences, out var reason3))
                    {
                        // Make this use PreferencesManager instead of just erroring :3
                        if (reason3 != null)
                            selector.LockRequirements(_characterRequirementsSystem.GetRequirementsText(new List<string> { { reason3 } }));
                    }
                    else
                        selector.UnlockRequirements();

                    characterList.OnItemSelected += args =>
                    {
                        var selectedChar = args.Id;
                        characterList.SelectId(selectedChar);
                        Preferences = Preferences?.WithAssignedChar(job.ID, selectedChar);
                        foreach (var (jobId, character, other) in _jobPriorities)
                        {
                            if (jobId == job.ID)
                                character.Select(selectedChar);
                            if (Preferences != null && !_requirements.CheckCharacterAssigned(job, Preferences, out var reason3) && jobId != job.ID)
                            {
                                // Make this use PreferencesManager instead of just not workign on null :3
                                if (reason3 != null)
                                    selector.LockRequirements(_characterRequirementsSystem.GetRequirementsText(new List<string> { { reason3 } }));
                            }
                            else
                                selector.UnlockRequirements();
                        }
                        // Should work, keep a close eye on it.
                        if (Preferences?.CharJobs(selectedChar) > 2)
                            RefreshJobs();
                    };

                    selector.OnSelected += selectedPrio =>
                    {
                        var selectedJobPrio = (JobPriority) selectedPrio;
                        //_profileEditor.Profile = _profileEditor.Profile?.WithJobPriority(job.ID, selectedJobPrio);
                        Preferences = Preferences?.WithJobPriority(job.ID, selectedJobPrio);

                        foreach (var (jobId, character, other) in _jobPriorities)
                        {
                            // Sync other selectors with the same job in case of multiple department jobs
                            if (jobId == job.ID)
                                other.Select(selectedPrio);
                            else if (selectedJobPrio == JobPriority.High &&
                                     (JobPriority) other.Selected == JobPriority.High)
                            {
                                // Lower any other high priorities with the same character to medium.
                                other.Select((int) JobPriority.Medium);
                                //_profileEditor.Profile = _profileEditor.Profile?.WithJobPriority(jobId, JobPriority.Medium);
                                Preferences = Preferences?.WithJobPriority(jobId, JobPriority.Medium);
                            }
                        }

                        // TODO: Only reload on high change (either to or from).
                        //ReloadPreview();
                        UpdateJobPriorities();
                        //SetDirty();
                    };

                    _jobPriorities.Add((job.ID, characterList, selector));
                    jobContainer.AddChild(selector);
                    jobContainer.AddChild(characterList);
                    jobContainer.AddChild(jobLoadoutButton);
                    category.AddChild(jobContainer);
                }
            }
            if (Preferences is not null)
                UpdateJobPriorities();
        }

        /// Updates selected job priorities to the profile's
        private void UpdateJobPriorities()
        {
            foreach (var (jobId, character, prioritySelector) in _jobPriorities)
            {
                //var priority = _profileEditor.Profile?.JobPriorities.GetValueOrDefault(jobId, JobPriority.Never) ?? JobPriority.Never;
                // Need to make getvalueordefault.
                //var priority = Preferences?.JobPriorities[jobId].Item2 ?? JobPriority.Never;
                var priority = Preferences?.JobPriorities.GetValueOrDefault(jobId, (0, JobPriority.Never)) ?? (0, JobPriority.Never);
                //var charSlot = Preferences?.JobPriorities[jobId] != null ? Preferences.JobPriorities[jobId].Item1 : 0;
                prioritySelector.Select((int) priority.Item2);
                character.Select(priority.Item1);
            }
        }

        private void UpdateCharAvailability(JobPrototype[] jobs, OptionButton chars, JobPreferences prefs)
        {
            foreach (var job in jobs)
            {
                foreach (var (slot, character) in _preferencesManager.Preferences!.Characters)
                {
                    int characterJobs = prefs.CharJobs(slot);
                    // Change this to use the CVar later.
                    if (characterJobs < 3)
                        chars.SetItemDisabled(slot + 1, true);
                    else chars.SetItemDisabled(slot + 1, false);
                }
            }
        }
    }
}
