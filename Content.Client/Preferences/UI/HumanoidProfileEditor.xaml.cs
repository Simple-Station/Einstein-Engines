using System.Linq;
using System.Numerics;
using Content.Client.Administration.UI;
using Content.Client.Guidebook;
using Content.Client.Humanoid;
using Content.Client.Lobby;
using Content.Client.Message;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared.CCVar;
using Content.Shared.Clothing.Components;
using Content.Shared.Clothing.Loadouts.Prototypes;
using Content.Shared.Customization.Systems;
using Content.Shared.GameTicking;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.Traits;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.Enums;
using Robust.Shared.Map;
using Robust.Shared.Physics;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Direction = Robust.Shared.Maths.Direction;

namespace Content.Client.Preferences.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class HumanoidProfileEditor : BoxContainer
    {
        private readonly IEntityManager _entityManager;
        private readonly IPrototypeManager _prototypeManager;
        private readonly IClientPreferencesManager _preferencesManager;
        private readonly IConfigurationManager _configurationManager;
        private readonly MarkingManager _markingManager;
        private readonly JobRequirementsManager _requirements;
        private readonly CharacterRequirementsSystem _characterRequirementsSystem;
        private readonly LobbyUIController _controller;

        private LineEdit _ageEdit => CAgeEdit;
        private LineEdit _nameEdit => CNameEdit;
        private TextEdit? _flavorTextEdit;
        private Button _nameRandomButton => CNameRandomize;
        private Button _randomizeEverythingButton => CRandomizeEverything;
        private RichTextLabel _warningLabel => CWarningLabel;
        private Button _saveButton => CSaveButton;
        private OptionButton _sexButton => CSexButton;
        private OptionButton _genderButton => CPronounsButton;
        private Slider _skinColor => CSkin;
        private OptionButton _spawnPriorityButton => CSpawnPriorityButton;
        private SingleMarkingPicker _hairPicker => CHairStylePicker;
        private SingleMarkingPicker _facialHairPicker => CFacialHairPicker;
        private EyeColorPicker _eyesPicker => CEyeColorPicker;
        private Slider _heightSlider => CHeightSlider;
        private Slider _widthSlider => CWidthSlider;

        private NeoTabContainer _tabContainer => CTabContainer;
        private BoxContainer _jobList => CJobList;
        private BoxContainer _antagList => CAntagList;
        private Dictionary<Button, ConfirmationData> _confirmationData = new();
        private Label _traitPointsLabel => TraitPointsLabel;
        private int _traitCount;
        private ProgressBar _traitPointsBar => TraitPointsBar;
        private Button _traitsShowUnusableButton => TraitsShowUnusableButton;
        private Button _traitsRemoveUnusableButton => TraitsRemoveUnusableButton;
        private NeoTabContainer _traitsTabs => CTraitsTabs;
        private Label _loadoutPointsLabel => LoadoutPointsLabel;
        private ProgressBar _loadoutPointsBar => LoadoutPointsBar;
        private Button _loadoutsShowUnusableButton => LoadoutsShowUnusableButton;
        private Button _loadoutsRemoveUnusableButton => LoadoutsRemoveUnusableButton;
        private NeoTabContainer _loadoutsTabs => CLoadoutsTabs;
        private readonly List<JobPrioritySelector> _jobPriorities;
        private OptionButton _preferenceUnavailableButton => CPreferenceUnavailableButton;
        private readonly Dictionary<string, BoxContainer> _jobCategories;
        private readonly List<SpeciesPrototype> _speciesList;
        private readonly List<AntagPreferenceSelector> _antagPreferences = new();
        private readonly List<TraitPreferenceSelector> _traitPreferences;
        private readonly List<LoadoutPreferenceSelector> _loadoutPreferences;

        private SpriteView _previewSpriteView => CSpriteView;
        private Button _previewRotateLeftButton => CSpriteRotateLeft;
        private Button _previewRotateRightButton => CSpriteRotateRight;
        private Direction _previewRotation = Direction.North;

        private BoxContainer _rgbSkinColorContainer => CRgbSkinColorContainer;
        private ColorSelectorSliders _rgbSkinColorSelector;

        private bool _isDirty;
        public int CharacterSlot;
        public HumanoidCharacterProfile? Profile;

        public event Action<HumanoidCharacterProfile, int>? OnProfileChanged;

        [ValidatePrototypeId<GuideEntryPrototype>]
        private const string DefaultSpeciesGuidebook = "Species";

        public HumanoidProfileEditor(IClientPreferencesManager preferencesManager, IPrototypeManager prototypeManager,
            IConfigurationManager configurationManager)
        {
            RobustXamlLoader.Load(this);
            _entityManager = IoCManager.Resolve<IEntityManager>();
            _prototypeManager = prototypeManager;
            _preferencesManager = preferencesManager;
            _configurationManager = configurationManager;
            _markingManager = IoCManager.Resolve<MarkingManager>();
            _characterRequirementsSystem = _entityManager.System<CharacterRequirementsSystem>();
            _controller = UserInterfaceManager.GetUIController<LobbyUIController>();

            _controller.SetProfileEditor(this);
            _controller.PreviewDummyUpdated += OnDummyUpdate;
            _previewSpriteView.SetEntity(_controller.GetPreviewDummy());

            #region Left

            #region Name

            _nameEdit.OnTextChanged += args => { SetName(args.Text); };
            _nameRandomButton.OnPressed += args => RandomizeName();
            _randomizeEverythingButton.OnPressed += args => { RandomizeEverything(); };
            _warningLabel.SetMarkup($"[color=red]{Loc.GetString("humanoid-profile-editor-naming-rules-warning")}[/color]");

            #endregion Name

            #region Appearance

            CAppearance.Orphan();
            _tabContainer.AddTab(CAppearance, Loc.GetString("humanoid-profile-editor-appearance-tab"));

            ShowClothes.OnPressed += ToggleClothes;
            ShowLoadouts.OnPressed += ToggleLoadouts;

            #region Sex

            _sexButton.OnItemSelected += args =>
            {
                _sexButton.SelectId(args.Id);
                SetSex((Sex) args.Id);
            };

            #endregion Sex

            #region Age

            _ageEdit.OnTextChanged += args =>
            {
                if (!int.TryParse(args.Text, out var newAge))
                    return;
                SetAge(newAge);
            };

            #endregion Age

            #region Gender

            _genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-male-text"), (int) Gender.Male);
            _genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-female-text"), (int) Gender.Female);
            _genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-epicene-text"), (int) Gender.Epicene);
            _genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-neuter-text"), (int) Gender.Neuter);

            _genderButton.OnItemSelected += args =>
            {
                _genderButton.SelectId(args.Id);
                SetGender((Gender) args.Id);
            };

            #endregion Gender

            #region Species

            _speciesList = prototypeManager.EnumeratePrototypes<SpeciesPrototype>().Where(o => o.RoundStart).ToList();
            for (var i = 0; i < _speciesList.Count; i++)
            {
                var name = Loc.GetString(_speciesList[i].Name);
                CSpeciesButton.AddItem(name, i);
            }

            CSpeciesButton.OnItemSelected += args =>
            {
                CSpeciesButton.SelectId(args.Id);
                SetSpecies(_speciesList[args.Id].ID);
                UpdateHairPickers();
                OnSkinColorOnValueChanged();
            };

            #endregion Species

            #region Height

            var prototype = _speciesList.Find(x => x.ID == Profile?.Species) ?? _speciesList.First();

            _heightSlider.MinValue = prototype.MinHeight;
            _heightSlider.MaxValue = prototype.MaxHeight;
            _heightSlider.Value = Profile?.Height ?? prototype.DefaultHeight;
            var height = MathF.Round(prototype.AverageHeight * _heightSlider.Value);
            CHeightLabel.Text = Loc.GetString("humanoid-profile-editor-height-label", ("height", (int) height));

            _heightSlider.OnValueChanged += args =>
            {
                if (Profile is null)
                    return;

                prototype = _speciesList.Find(x => x.ID == Profile.Species) ?? _speciesList.First(); // Just in case

                var value = Math.Clamp(args.Value, prototype.MinHeight, prototype.MaxHeight);
                var height = MathF.Round(prototype.AverageHeight * value);
                CHeightLabel.Text = Loc.GetString("humanoid-profile-editor-height-label", ("height", (int) height));
                SetProfileHeight(value);
                UpdateWeight();
            };

            CHeightReset.OnPressed += _ =>
            {
                _heightSlider.Value = prototype.DefaultHeight;
                SetProfileHeight(prototype.DefaultHeight);
                UpdateWeight();
            };


            _widthSlider.MinValue = prototype.MinWidth;
            _widthSlider.MaxValue = prototype.MaxWidth;
            _widthSlider.Value = Profile?.Width ?? prototype.DefaultWidth;
            var width = MathF.Round(prototype.AverageWidth * _widthSlider.Value);
            CWidthLabel.Text = Loc.GetString("humanoid-profile-editor-width-label", ("width", width));

            _widthSlider.OnValueChanged += args =>
            {
                if (Profile is null)
                    return;

                prototype = _speciesList.Find(x => x.ID == Profile.Species) ?? _speciesList.First(); // Just in case

                var value = Math.Clamp(args.Value, prototype.MinWidth, prototype.MaxWidth);
                var width = MathF.Round(prototype.AverageWidth * value);
                CWidthLabel.Text = Loc.GetString("humanoid-profile-editor-width-label", ("width", width));
                SetProfileWidth(value);
                UpdateWeight();
            };

            CWidthReset.OnPressed += _ =>
            {
                _widthSlider.Value = prototype.DefaultWidth;
                SetProfileWidth(prototype.DefaultWidth);
                UpdateWeight();
            };

            prototypeManager.Index(prototype.Prototype).TryGetComponent<FixturesComponent>(out var fixture);
            if (fixture != null)
            {
                var radius = fixture.Fixtures["fix1"].Shape.Radius;
                var density = fixture.Fixtures["fix1"].Density;
                var avg = (_widthSlider.Value + _heightSlider.Value) / 2;
                var weight = MathF.Round(MathF.PI * MathF.Pow(radius * avg, 2) * density);
                CWeightLabel.Text = Loc.GetString("humanoid-profile-editor-weight-label", ("weight", (int) weight));
            }
            else
            {
                // Whelp, the fixture doesn't exist, guesstimate it instead
                CWeightLabel.Text = Loc.GetString("humanoid-profile-editor-weight-label", ("weight", (int) 71));
            }

            #endregion Height

            #region Skin


            _skinColor.OnValueChanged += _ =>
            {
                OnSkinColorOnValueChanged();
            };

            _rgbSkinColorContainer.AddChild(_rgbSkinColorSelector = new ColorSelectorSliders());
            _rgbSkinColorSelector.OnColorChanged += _ =>
            {
                OnSkinColorOnValueChanged();
            };

            #endregion

            #region Hair

            _hairPicker.OnMarkingSelect += newStyle =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairStyleName(newStyle.id));
                IsDirty = true;
                UpdatePreview();
            };

            _hairPicker.OnColorChanged += newColor =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairColor(newColor.marking.MarkingColors[0]));
                UpdateCMarkingsHair();
                IsDirty = true;
                UpdatePreview();
            };

            _facialHairPicker.OnMarkingSelect += newStyle =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairStyleName(newStyle.id));
                IsDirty = true;
                UpdatePreview();
            };

            _facialHairPicker.OnColorChanged += newColor =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairColor(newColor.marking.MarkingColors[0]));
                UpdateCMarkingsFacialHair();
                IsDirty = true;
                UpdatePreview();
            };

            _hairPicker.OnSlotRemove += _ =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairStyleName(HairStyles.DefaultHairStyle)
                );
                UpdateHairPickers();
                UpdateCMarkingsHair();
                IsDirty = true;
                UpdatePreview();
            };

            _facialHairPicker.OnSlotRemove += _ =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairStyleName(HairStyles.DefaultFacialHairStyle)
                );
                UpdateHairPickers();
                UpdateCMarkingsFacialHair();
                IsDirty = true;
                UpdatePreview();
            };

            _hairPicker.OnSlotAdd += delegate()
            {
                if (Profile is null)
                    return;

                var hair = _markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.Hair, Profile.Species).Keys
                    .FirstOrDefault();

                if (string.IsNullOrEmpty(hair))
                    return;

                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairStyleName(hair)
                );

                UpdateHairPickers();
                UpdateCMarkingsHair();
                IsDirty = true;
                UpdatePreview();
            };

            _facialHairPicker.OnSlotAdd += delegate()
            {
                if (Profile is null)
                    return;

                var hair = _markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.FacialHair, Profile.Species).Keys
                    .FirstOrDefault();

                if (string.IsNullOrEmpty(hair))
                    return;

                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairStyleName(hair)
                );

                UpdateHairPickers();
                UpdateCMarkingsFacialHair();
                IsDirty = true;
                UpdatePreview();
            };

            #endregion Hair

            #region SpawnPriority

            foreach (var value in Enum.GetValues<SpawnPriorityPreference>())
            {
                _spawnPriorityButton.AddItem(Loc.GetString($"humanoid-profile-editor-preference-spawn-priority-{value.ToString().ToLower()}"), (int) value);
            }

            _spawnPriorityButton.OnItemSelected += args =>
            {
                _spawnPriorityButton.SelectId(args.Id);
                SetSpawnPriority((SpawnPriorityPreference) args.Id);
            };

            #endregion SpawnPriority

            #region Eyes

            _eyesPicker.OnEyeColorPicked += newColor =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithEyeColor(newColor));
                CMarkings.CurrentEyeColor = Profile.Appearance.EyeColor;
                IsDirty = true;
                UpdatePreview();
            };

            #endregion Eyes

            #endregion Appearance

            #region Jobs

            CJobs.Orphan();
            _tabContainer.AddTab(CJobs, Loc.GetString("humanoid-profile-editor-jobs-tab"));

            _preferenceUnavailableButton.AddItem(
                Loc.GetString("humanoid-profile-editor-preference-unavailable-stay-in-lobby-button"),
                (int) PreferenceUnavailableMode.StayInLobby);
            _preferenceUnavailableButton.AddItem(
                Loc.GetString("humanoid-profile-editor-preference-unavailable-spawn-as-overflow-button",
                              ("overflowJob", Loc.GetString(SharedGameTicker.FallbackOverflowJobName))),
                (int) PreferenceUnavailableMode.SpawnAsOverflow);

            _preferenceUnavailableButton.OnItemSelected += args =>
            {
                _preferenceUnavailableButton.SelectId(args.Id);

                Profile = Profile?.WithPreferenceUnavailable((PreferenceUnavailableMode) args.Id);
                IsDirty = true;
            };

            _jobPriorities = new List<JobPrioritySelector>();
            _jobCategories = new Dictionary<string, BoxContainer>();
            _requirements = IoCManager.Resolve<JobRequirementsManager>();
            _requirements.Updated += UpdateAntagRequirements;
            _requirements.Updated += UpdateRoleRequirements;
            UpdateAntagRequirements();
            UpdateRoleRequirements();

            #endregion Jobs

            #region Antags

            CAntags.Orphan();
            _tabContainer.AddTab(CAntags, Loc.GetString("humanoid-profile-editor-antags-tab"));

            #endregion Antags

            #region Traits

            // Set up the traits tab
            CTraitsTab.Orphan();
            _tabContainer.AddTab(CTraitsTab, Loc.GetString("humanoid-profile-editor-traits-tab"));
            _traitPreferences = new List<TraitPreferenceSelector>();

            // Show/Hide the traits tab if they ever get enabled/disabled
            var traitsEnabled = configurationManager.GetCVar(CCVars.GameTraitsEnabled);
            _tabContainer.SetTabVisible(3, traitsEnabled);
            configurationManager.OnValueChanged(CCVars.GameTraitsEnabled,
                enabled => _tabContainer.SetTabVisible(3, enabled));

            _traitsShowUnusableButton.OnToggled += args => UpdateTraits(args.Pressed);
            _traitsRemoveUnusableButton.OnPressed += _ => TryRemoveUnusableTraits();

            UpdateTraits(false);

            #endregion

            #region Loadouts

            // Set up the loadouts tab
            CLoadoutsTab.Orphan();
            _tabContainer.AddTab(CLoadoutsTab, Loc.GetString("humanoid-profile-editor-loadouts-tab"));
            _loadoutPreferences = new List<LoadoutPreferenceSelector>();

            // Show/Hide the loadouts tab if they ever get enabled/disabled
            var loadoutsEnabled = configurationManager.GetCVar(CCVars.GameLoadoutsEnabled);
            _tabContainer.SetTabVisible(4, loadoutsEnabled);
            ShowLoadouts.Visible = loadoutsEnabled;
            configurationManager.OnValueChanged(CCVars.GameLoadoutsEnabled,
                enabled => LoadoutsChanged(enabled));

            _loadoutsShowUnusableButton.OnToggled += args => UpdateLoadouts(args.Pressed);
            _loadoutsRemoveUnusableButton.OnPressed += _ => TryRemoveUnusableLoadouts();

            UpdateLoadouts(false);

            #endregion

            #region Save

            _saveButton.OnPressed += _ => { Save(); };

            #endregion Save

            #region Markings

            CMarkingsTab.Orphan();
            _tabContainer.AddTab(CMarkingsTab, Loc.GetString("humanoid-profile-editor-markings-tab"));

            CMarkings.OnMarkingAdded += OnMarkingChange;
            CMarkings.OnMarkingRemoved += OnMarkingChange;
            CMarkings.OnMarkingColorChange += OnMarkingChange;
            CMarkings.OnMarkingRankChange += OnMarkingChange;

            #endregion Markings

            #region FlavorText

            if (configurationManager.GetCVar(CCVars.FlavorText))
            {
                var flavorText = new FlavorText.FlavorText();
                _tabContainer.AddTab(flavorText, Loc.GetString("humanoid-profile-editor-flavortext-tab"));
                _flavorTextEdit = flavorText.CFlavorTextInput;

                flavorText.OnFlavorTextChanged += OnFlavorTextChange;
            }

            #endregion FlavorText

            #region Dummy

            _previewRotateLeftButton.OnPressed += _ =>
            {
                _previewRotation = _previewRotation.TurnCw();
                SetPreviewRotation(_previewRotation);
            };
            _previewRotateRightButton.OnPressed += _ =>
            {
                _previewRotation = _previewRotation.TurnCcw();
                SetPreviewRotation(_previewRotation);
            };

            #endregion Dummy

            #endregion Left

            if (preferencesManager.ServerDataLoaded)
                LoadServerData();

            preferencesManager.OnServerDataLoaded += LoadServerData;

            SpeciesInfoButton.OnPressed += OnSpeciesInfoButtonPressed;

            UpdateSpeciesGuidebookIcon();

            IsDirty = false;
        }


        private void LoadoutsChanged(bool enabled)
        {
            _tabContainer.SetTabVisible(4, enabled);
            ShowLoadouts.Visible = enabled;
        }

        private void OnSpeciesInfoButtonPressed(BaseButton.ButtonEventArgs args)
        {
            var guidebookController = UserInterfaceManager.GetUIController<GuidebookUIController>();
            var species = Profile?.Species ?? SharedHumanoidAppearanceSystem.DefaultSpecies;
            var page = DefaultSpeciesGuidebook;
            if (_prototypeManager.HasIndex<GuideEntryPrototype>(species))
                page = species;

            if (_prototypeManager.TryIndex<GuideEntryPrototype>(DefaultSpeciesGuidebook, out var guideRoot))
            {
                var dict = new Dictionary<string, GuideEntry> { { DefaultSpeciesGuidebook, guideRoot } };
                //TODO: Don't close the guidebook if its already open, just go to the correct page
                guidebookController.ToggleGuidebook(dict, includeChildren:true, selected: page);
            }
        }

        private void ToggleClothes(BaseButton.ButtonEventArgs _)
        {
            _controller.ShowClothes = ShowClothes.Pressed;
            _controller.UpdateCharacterUI();
        }

        private void ToggleLoadouts(BaseButton.ButtonEventArgs _)
        {
            _controller.ShowLoadouts = ShowLoadouts.Pressed;
            _controller.UpdateCharacterUI();
        }

        private void OnDummyUpdate(EntityUid value)
        {
            _previewSpriteView.SetEntity(value);
        }

        private void UpdateAntagRequirements()
        {
            _antagList.DisposeAllChildren();
            _antagPreferences.Clear();

            foreach (var antag in _prototypeManager.EnumeratePrototypes<AntagPrototype>().OrderBy(a => Loc.GetString(a.Name)))
            {
                if (!antag.SetPreference)
                    continue;

                var selector = new AntagPreferenceSelector(antag,
                        _jobPriorities.FirstOrDefault(j => j.Priority == JobPriority.High)?.HighJob
                            ?? new())
                    { Margin = new Thickness(3f, 3f, 3f, 0f) };
                _antagList.AddChild(selector);
                _antagPreferences.Add(selector);
                if (selector.Disabled)
                {
                    Profile = Profile?.WithAntagPreference(antag.ID, false);
                    IsDirty = true;
                }

                selector.PreferenceChanged += preference =>
                {
                    Profile = Profile?.WithAntagPreference(antag.ID, preference);
                    IsDirty = true;
                };
            }
        }

        private void UpdateRoleRequirements()
        {
            _jobList.DisposeAllChildren();
            _jobPriorities.Clear();
            _jobCategories.Clear();
            var firstCategory = true;

            var departments = _prototypeManager.EnumeratePrototypes<DepartmentPrototype>().ToArray();
            Array.Sort(departments, DepartmentUIComparer.Instance);

            foreach (var department in departments)
            {
                var departmentName = Loc.GetString($"department-{department.ID}");

                if (!_jobCategories.TryGetValue(department.ID, out var category))
                {
                    category = new BoxContainer
                    {
                        Orientation = LayoutOrientation.Vertical,
                        Name = department.ID,
                        ToolTip = Loc.GetString("humanoid-profile-editor-jobs-amount-in-department-tooltip",
                            ("departmentName", departmentName))
                    };

                    if (firstCategory)
                    {
                        firstCategory = false;
                    }
                    else
                    {
                        category.AddChild(new Control
                        {
                            MinSize = new Vector2(0, 23),
                        });
                    }

                    category.AddChild(new PanelContainer
                    {
                        PanelOverride = new StyleBoxFlat {BackgroundColor = Color.FromHex("#464966")},
                        Children =
                        {
                            new Label
                            {
                                Text = Loc.GetString("humanoid-profile-editor-department-jobs-label",
                                    ("departmentName", departmentName)),
                                Margin = new Thickness(5f, 0, 0, 0)
                            }
                        }
                    });

                    _jobCategories[department.ID] = category;
                    _jobList.AddChild(category);
                }

                var jobs = department.Roles.Select(jobId => _prototypeManager.Index<JobPrototype>(jobId))
                    .Where(job => job.SetPreference)
                    .ToArray();
                Array.Sort(jobs, JobUIComparer.Instance);

                foreach (var job in jobs)
                {
                    var selector = new JobPrioritySelector(job, _prototypeManager);

                    if (!_characterRequirementsSystem.CheckRequirementsValid(
                        job.Requirements ?? new(),
                        job,
                        Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                        _requirements.GetRawPlayTimeTrackers(),
                        _requirements.IsWhitelisted(),
                        job,
                        _entityManager,
                        _prototypeManager,
                        _configurationManager,
                        out var reasons))
                        selector.LockRequirements(_characterRequirementsSystem.GetRequirementsText(reasons));

                    category.AddChild(selector);
                    _jobPriorities.Add(selector);
                    EnsureJobRequirementsValid(); // DeltaV

                    selector.PriorityChanged += priority =>
                    {
                        foreach (var jobSelector in _jobPriorities)
                        {
                            // Sync other selectors with the same job in case of multiple department jobs
                            if (jobSelector.Proto == selector.Proto)
                            {
                                jobSelector.Priority = priority;
                            }
                            else if (priority == JobPriority.High && jobSelector.Priority == JobPriority.High)
                            {
                                // Lower any other high priorities to medium.
                                jobSelector.Priority = JobPriority.Medium;
                                Profile = Profile?.WithJobPriority(jobSelector.Proto.ID, JobPriority.Medium);
                            }
                        }

                        Profile = Profile?.WithJobPriority(job.ID, priority);
                        IsDirty = true;
                        UpdateCharacterRequired();
                    };

                }
            }

            if (Profile is not null)
            {
                UpdateJobPriorities();
            }
        }

        /// <summary>
        ///     DeltaV - Make sure that no invalid job priorities get through.
        /// </summary>
        private void EnsureJobRequirementsValid()
        {
            foreach (var selector in _jobPriorities)
            {
                if (selector.Priority == JobPriority.Never
                    || _characterRequirementsSystem.CheckRequirementsValid(
                        selector.Proto.Requirements ?? new(),
                        selector.Proto,
                        Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                        _requirements.GetRawPlayTimeTrackers(),
                        _requirements.IsWhitelisted(),
                        selector.Proto,
                        _entityManager,
                        _prototypeManager,
                        _configurationManager,
                        out _))
                    continue;

                selector.Priority = JobPriority.Never;
                Profile = Profile?.WithJobPriority(selector.Proto.ID, JobPriority.Never);
            }
        }

        private void OnFlavorTextChange(string content)
        {
            if (Profile is null)
                return;

            Profile = Profile.WithFlavorText(content);
            IsDirty = true;
        }

        private void OnMarkingChange(MarkingSet markings)
        {
            if (Profile is null)
                return;

            Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithMarkings(markings.GetForwardEnumerator().ToList()));
            IsDirty = true;
            UpdatePreview();
        }

        private void OnSkinColorOnValueChanged()
        {
            if (Profile is null)
                return;

            var skin = _prototypeManager.Index<SpeciesPrototype>(Profile.Species).SkinColoration;
            var skinColor = _prototypeManager.Index<SpeciesPrototype>(Profile.Species).DefaultSkinTone;

            switch (skin)
            {
                case HumanoidSkinColor.HumanToned:
                {
                    if (!_skinColor.Visible)
                    {
                        _skinColor.Visible = true;
                        _rgbSkinColorContainer.Visible = false;
                    }

                    var color = SkinColor.HumanSkinTone((int) _skinColor.Value);

                    CMarkings.CurrentSkinColor = color;
                    Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithSkinColor(color));//
                    break;
                }
                case HumanoidSkinColor.Hues:
                {
                    if (!_rgbSkinColorContainer.Visible)
                    {
                        _skinColor.Visible = false;
                        _rgbSkinColorContainer.Visible = true;
                    }

                    CMarkings.CurrentSkinColor = _rgbSkinColorSelector.Color;
                    Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithSkinColor(_rgbSkinColorSelector.Color));
                    break;
                }
                case HumanoidSkinColor.TintedHues:
                case HumanoidSkinColor.TintedHuesSkin: // DeltaV - Tone blending
                {
                    if (!_rgbSkinColorContainer.Visible)
                    {
                        _skinColor.Visible = false;
                        _rgbSkinColorContainer.Visible = true;
                    }

                    var color = skin switch // DeltaV - Tone blending
                    {
                        HumanoidSkinColor.TintedHues => SkinColor.TintedHues(_rgbSkinColorSelector.Color),
                        HumanoidSkinColor.TintedHuesSkin => SkinColor.TintedHuesSkin(_rgbSkinColorSelector.Color, skinColor),
                        _ => Color.White
                    };

                    CMarkings.CurrentSkinColor = color;
                    Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithSkinColor(color));
                    break;
                }
            }

            IsDirty = true;
            UpdatePreview();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            if (!disposing)
                return;

            _controller.PreviewDummyUpdated -= OnDummyUpdate;
            _requirements.Updated -= UpdateAntagRequirements;
            _requirements.Updated -= UpdateRoleRequirements;
            _preferencesManager.OnServerDataLoaded -= LoadServerData;

            _configurationManager.UnsubValueChanged(CCVars.GameLoadoutsEnabled, LoadoutsChanged);
        }

        private void LoadServerData()
        {
            Profile = (HumanoidCharacterProfile) _preferencesManager.Preferences!.SelectedCharacter;
            CharacterSlot = _preferencesManager.Preferences.SelectedCharacterIndex;

            UpdateAntagRequirements();
            UpdateRoleRequirements();
            UpdateControls();
            EnsureJobRequirementsValid(); // DeltaV
        }

        private void SetAge(int newAge)
        {
            Profile = Profile?.WithAge(newAge);
            IsDirty = true;
        }

        private void SetSex(Sex newSex)
        {
            Profile = Profile?.WithSex(newSex);
            // for convenience, default to most common gender when new sex is selected
            switch (newSex)
            {
                case Sex.Male:
                    Profile = Profile?.WithGender(Gender.Male);
                    break;
                case Sex.Female:
                    Profile = Profile?.WithGender(Gender.Female);
                    break;
                default:
                    Profile = Profile?.WithGender(Gender.Epicene);
                    break;
            }
            UpdateGenderControls();
            CMarkings.SetSex(newSex);
            IsDirty = true;
            UpdatePreview();
        }

        private void SetGender(Gender newGender)
        {
            Profile = Profile?.WithGender(newGender);
            IsDirty = true;
        }

        private void SetSpecies(string newSpecies)
        {
            Profile = Profile?.WithSpecies(newSpecies);
            OnSkinColorOnValueChanged(); // Species may have special color prefs, make sure to update it.
            CMarkings.SetSpecies(newSpecies); // Repopulate the markings tab as well.
            UpdateSexControls(); // Update sex for new species
            UpdateCharacterRequired();
            // Changing species provides inaccurate sliders without these
            UpdateHeightControls();
            UpdateWidthControls();
            UpdateWeight();
            UpdateSpeciesGuidebookIcon();
            IsDirty = true;
            UpdatePreview();
        }

        private void SetName(string newName)
        {
            Profile = Profile?.WithName(newName);
            IsDirty = true;
        }

        private void SetSpawnPriority(SpawnPriorityPreference newSpawnPriority)
        {
            Profile = Profile?.WithSpawnPriorityPreference(newSpawnPriority);
            IsDirty = true;
        }

        private void SetProfileHeight(float height)
        {
            Profile = Profile?.WithHeight(height);
            IsDirty = true;
            UpdatePreview();
        }

        private void SetProfileWidth(float width)
        {
            Profile = Profile?.WithWidth(width);
            IsDirty = true;
            UpdatePreview();
        }

        public void Save()
        {
            IsDirty = false;

            if (Profile == null)
                return;

            _preferencesManager.UpdateCharacter(Profile, CharacterSlot);
            OnProfileChanged?.Invoke(Profile, CharacterSlot);
        }

        private bool IsDirty
        {
            get => _isDirty;
            set
            {
                _isDirty = value;
                UpdateSaveButton();
            }
        }

        private void UpdateNameEdit()
        {
            _nameEdit.Text = Profile?.Name ?? "";
        }

        private void UpdateFlavorTextEdit()
        {
            if(_flavorTextEdit != null)
                _flavorTextEdit.TextRope = new Rope.Leaf(Profile?.FlavorText ?? "");
        }

        private void UpdateAgeEdit()
        {
            _ageEdit.Text = Profile?.Age.ToString() ?? "";
        }

        private void UpdateSexControls()
        {
            if (Profile == null)
                return;

            _sexButton.Clear();

            var sexes = new List<Sex>();

            // Add species sex options, default to just none if we are in bizzaro world and have no species
            if (_prototypeManager.TryIndex<SpeciesPrototype>(Profile.Species, out var speciesProto))
                foreach (var sex in speciesProto.Sexes)
                    sexes.Add(sex);
            else
                sexes.Add(Sex.Unsexed);

            // Add button for each sex
            foreach (var sex in sexes)
                _sexButton.AddItem(Loc.GetString($"humanoid-profile-editor-sex-{sex.ToString().ToLower()}-text"), (int) sex);

            if (sexes.Contains(Profile.Sex))
                _sexButton.SelectId((int) Profile.Sex);
            else
                _sexButton.SelectId((int) sexes[0]);
        }

        private void UpdateSkinColor()
        {
            if (Profile == null)
                return;

            var skin = _prototypeManager.Index<SpeciesPrototype>(Profile.Species).SkinColoration;

            switch (skin)
            {
                case HumanoidSkinColor.HumanToned:
                {
                    if (!_skinColor.Visible)
                    {
                        _skinColor.Visible = true;
                        _rgbSkinColorContainer.Visible = false;
                    }

                    _skinColor.Value = SkinColor.HumanSkinToneFromColor(Profile.Appearance.SkinColor);
                    break;
                }
                case HumanoidSkinColor.Hues:
                {
                    if (!_rgbSkinColorContainer.Visible)
                    {
                        _skinColor.Visible = false;
                        _rgbSkinColorContainer.Visible = true;
                    }

                    // Set the RGB values to the direct values otherwise
                    _rgbSkinColorSelector.Color = Profile.Appearance.SkinColor;
                    break;
                }
                case HumanoidSkinColor.TintedHues:
                {
                    if (!_rgbSkinColorContainer.Visible)
                    {
                        _skinColor.Visible = false;
                        _rgbSkinColorContainer.Visible = true;
                    }

                    // Set the RGB values to the direct values otherwise
                    _rgbSkinColorSelector.Color = Profile.Appearance.SkinColor;
                    break;
                }
            }
        }

        public void UpdateSpeciesGuidebookIcon()
        {
            SpeciesInfoButton.StyleClasses.Clear();

            var species = Profile?.Species;
            if (species is null
                || !_prototypeManager.TryIndex<SpeciesPrototype>(species, out var speciesProto)
                || !_prototypeManager.HasIndex<GuideEntryPrototype>(species))
                return;

            const string style = "SpeciesInfoDefault";
            SpeciesInfoButton.StyleClasses.Add(style);
        }

        private void UpdateMarkings()
        {
            if (Profile == null)
                return;

            CMarkings.SetData(Profile.Appearance.Markings, Profile.Species, Profile.Sex, Profile.Appearance.SkinColor,
                Profile.Appearance.EyeColor);
        }

        private void UpdateSpecies()
        {
            if (Profile == null)
                return;

            CSpeciesButton.Select(_speciesList.FindIndex(x => x.ID == Profile.Species));
        }

        private void UpdateGenderControls()
        {
            if (Profile == null)
                return;

            _genderButton.SelectId((int) Profile.Gender);
        }

        private void UpdateSpawnPriorityControls()
        {
            if (Profile == null)
                return;

            _spawnPriorityButton.SelectId((int) Profile.SpawnPriority);
        }

        private void UpdateHeightControls()
        {
            if (Profile == null)
                return;

            var species = _speciesList.Find(x => x.ID == Profile.Species) ?? _speciesList.First();

            _heightSlider.MinValue = species.MinHeight;
            _heightSlider.Value = Profile.Height;
            _heightSlider.MaxValue = species.MaxHeight;

            var height = MathF.Round(species.AverageHeight * _heightSlider.Value);
            CHeightLabel.Text = Loc.GetString("humanoid-profile-editor-height-label", ("height", (int) height));
        }

        private void UpdateWidthControls()
        {
            if (Profile == null)
                return;

            var species = _speciesList.Find(x => x.ID == Profile.Species) ?? _speciesList.First();

            _widthSlider.MinValue = species.MinWidth;
            _widthSlider.Value = Profile.Width;
            _widthSlider.MaxValue = species.MaxWidth;

            var width = MathF.Round(species.AverageWidth * _widthSlider.Value);
            CWidthLabel.Text = Loc.GetString("humanoid-profile-editor-width-label", ("width", (int) width));
        }

        private void UpdateWeight()
        {
            if (Profile == null)
                return;

            var species = _speciesList.Find(x => x.ID == Profile.Species) ?? _speciesList.First();
            _prototypeManager.Index(species.Prototype).TryGetComponent<FixturesComponent>(out var fixture);

            if (fixture != null)
            {
                var radius = fixture.Fixtures["fix1"].Shape.Radius;
                var density = fixture.Fixtures["fix1"].Density;
                var avg = (Profile.Width + Profile.Height) / 2;
                var weight = MathF.Round(MathF.PI * MathF.Pow(radius * avg, 2) * density);
                CWeightLabel.Text = Loc.GetString("humanoid-profile-editor-weight-label", ("weight", (int) weight));
            }

            _previewSpriteView.InvalidateMeasure();
        }

        private void UpdateHairPickers()
        {
            if (Profile == null)
                return;

            var hairMarking = Profile.Appearance.HairStyleId switch
            {
                HairStyles.DefaultHairStyle => new List<Marking>(),
                _ => new() { new(Profile.Appearance.HairStyleId, new List<Color>() { Profile.Appearance.HairColor }) },
            };

            var facialHairMarking = Profile.Appearance.FacialHairStyleId switch
            {
                HairStyles.DefaultFacialHairStyle => new List<Marking>(),
                _ => new() { new(Profile.Appearance.FacialHairStyleId, new List<Color>() { Profile.Appearance.FacialHairColor }) },
            };

            _hairPicker.UpdateData(
                hairMarking,
                Profile.Species,
                1);
            _facialHairPicker.UpdateData(
                facialHairMarking,
                Profile.Species,
                1);
        }

        private void UpdateCMarkingsHair()
        {
            if (Profile == null)
                return;

            // hair color
            Color? hairColor = null;
            if ( Profile.Appearance.HairStyleId != HairStyles.DefaultHairStyle &&
                _markingManager.Markings.TryGetValue(Profile.Appearance.HairStyleId, out var hairProto))
                if (_markingManager.CanBeApplied(Profile.Species, Profile.Sex, hairProto, _prototypeManager))
                    hairColor = _markingManager.MustMatchSkin(Profile.Species, HumanoidVisualLayers.Hair, out _, _prototypeManager)
                        ? Profile.Appearance.SkinColor
                        : Profile.Appearance.HairColor;

            if (hairColor != null)
                CMarkings.HairMarking = new(Profile.Appearance.HairStyleId, new List<Color> { hairColor.Value });
            else
                CMarkings.HairMarking = null;
        }

        private void UpdateCMarkingsFacialHair()
        {
            if (Profile == null)
                return;

            // facial hair color
            Color? facialHairColor = null;
            if ( Profile.Appearance.FacialHairStyleId != HairStyles.DefaultFacialHairStyle &&
                _markingManager.Markings.TryGetValue(Profile.Appearance.FacialHairStyleId, out var facialHairProto))
                if (_markingManager.CanBeApplied(Profile.Species, Profile.Sex, facialHairProto, _prototypeManager))
                    facialHairColor = _markingManager.MustMatchSkin(Profile.Species, HumanoidVisualLayers.Hair, out _, _prototypeManager)
                        ? Profile.Appearance.SkinColor
                        : Profile.Appearance.FacialHairColor;

            if (facialHairColor != null)
                CMarkings.FacialHairMarking = new(Profile.Appearance.FacialHairStyleId, new List<Color> { facialHairColor.Value });
            else
                CMarkings.FacialHairMarking = null;
        }

        private void UpdateEyePickers()
        {
            if (Profile == null)
                return;

            CMarkings.CurrentEyeColor = Profile.Appearance.EyeColor;
            _eyesPicker.SetData(Profile.Appearance.EyeColor);
        }

        private void UpdateSaveButton()
        {
            _saveButton.Disabled = Profile is null || !IsDirty;
        }

        private void UpdatePreview()
        {
            if (Profile is null)
                return;

            SetPreviewRotation(_previewRotation);
            _controller.UpdateCharacterUI();
            _traitsTabs.UpdateTabMerging();
            _loadoutsTabs.UpdateTabMerging();
        }

        private void SetPreviewRotation(Direction direction)
        {
            _previewSpriteView.OverrideDirection = (Direction) ((int) direction % 4 * 2);
        }

        public void UpdateControls()
        {
            if (Profile is null)
                return;

            UpdateNameEdit();
            UpdateFlavorTextEdit();
            UpdateSexControls();
            UpdateGenderControls();
            UpdateSkinColor();
            UpdateSpecies();
            UpdateSpawnPriorityControls();
            UpdateAgeEdit();
            UpdateEyePickers();
            UpdateSaveButton();
            UpdateJobPriorities();
            UpdateAntagPreferences();
            UpdateMarkings();
            UpdateHairPickers();
            UpdateCMarkingsHair();
            UpdateCMarkingsFacialHair();
            UpdateHeightControls();
            UpdateWidthControls();
            UpdateWeight();
            UpdateCharacterRequired();

            _preferenceUnavailableButton.SelectId((int) Profile.PreferenceUnavailable);
        }

        private void UpdateJobPriorities()
        {
            foreach (var prioritySelector in _jobPriorities)
            {
                var jobId = prioritySelector.Proto.ID;

                var priority = Profile?.JobPriorities.GetValueOrDefault(jobId, JobPriority.Never) ?? JobPriority.Never;

                prioritySelector.Priority = priority;
            }
        }

        private void UpdateAntagPreferences()
        {
            foreach (var preferenceSelector in _antagPreferences)
            {
                var antagId = preferenceSelector.Proto.ID;
                var preference = Profile?.AntagPreferences.Contains(antagId) ?? false;
                preferenceSelector.Preference = preference;
            }
        }

        #region Traits

        #region Updates

        private void UpdateTraitPreferences()
        {
            var points = _configurationManager.GetCVar(CCVars.GameTraitsDefaultPoints);
            _traitCount = 0;

            foreach (var preferenceSelector in _traitPreferences)
            {
                var traitId = preferenceSelector.Trait.ID;
                var preference = Profile?.TraitPreferences.Contains(traitId) ?? false;

                preferenceSelector.Preference = preference;

                if (!preference)
                    continue;

                points += preferenceSelector.Trait.Points;
                _traitCount += 1;
            }

            _traitPointsBar.Value = points;
            _traitPointsLabel.Text = Loc.GetString("humanoid-profile-editor-traits-header",
                ("points", points), ("traits", _traitCount),
                ("maxTraits", _configurationManager.GetCVar(CCVars.GameTraitsMax)));

            // Set the remove unusable button's label to have the correct amount of unusable traits
            _traitsRemoveUnusableButton.Text = Loc.GetString("humanoid-profile-editor-traits-remove-unusable-button",
                ("count", _traits
                    .Where(t => _traitPreferences
                        .Where(tps => tps.Preference).Select(tps => tps.Trait).Contains(t.Key))
                    .Count(t => !t.Value)));
            AdminUIHelpers.RemoveConfirm(_traitsRemoveUnusableButton, _confirmationData);

            IsDirty = true;
            UpdatePreview();
        }

        // Yeah this is mostly just copied from UpdateLoadouts
        // This whole file is bad though and a lot of loadout code came from traits originally
        //TODO Make this file not hell
        private Dictionary<TraitPrototype, bool> _traits = new();
        private void UpdateTraits(bool showUnusable)
        {
            // Reset trait points so you don't get -14 points or something for no reason
            var points = _configurationManager.GetCVar(CCVars.GameTraitsDefaultPoints);
            _traitPointsLabel.Text = Loc.GetString("humanoid-profile-editor-traits-points-label", ("points", points), ("max", points));
            _traitPointsBar.MaxValue = points;
            _traitPointsBar.Value = points;


            // Get the highest priority job to use for trait filtering
            var highJob = _controller.GetPreferredJob(Profile ?? HumanoidCharacterProfile.DefaultWithSpecies());

            _traits.Clear();
            foreach (var trait in _prototypeManager.EnumeratePrototypes<TraitPrototype>())
            {
                var usable = _characterRequirementsSystem.CheckRequirementsValid(
                    trait.Requirements,
                    highJob,
                    Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                    _requirements.GetRawPlayTimeTrackers(),
                    _requirements.IsWhitelisted(),
                    trait,
                    _entityManager,
                    _prototypeManager,
                    _configurationManager,
                    out _
                );
                _traits.Add(trait, usable);

                if (_traitPreferences.FindIndex(lps => lps.Trait.ID == trait.ID) is not (not -1 and var i))
                    continue;

                var selector = _traitPreferences[i];
                selector.Valid = usable;
                selector.ShowUnusable = showUnusable;
            }

            if (_traits.Count == 0)
            {
                _traitsTabs.AddTab(new Label { Text = Loc.GetString("humanoid-profile-editor-traits-no-traits") },
                    Loc.GetString("trait-category-Uncategorized"));
                return;
            }


            var uncategorized = _traitsTabs.Contents.FirstOrDefault(c => c.Name == "Uncategorized");
            if (uncategorized == null)
            {
                uncategorized = new BoxContainer
                {
                    Name = "Uncategorized",
                    Orientation = LayoutOrientation.Vertical,
                    HorizontalExpand = true,
                    VerticalExpand = true,
                    // I hate ScrollContainers
                    Children =
                    {
                        new ScrollContainer
                        {
                            HScrollEnabled = false,
                            HorizontalExpand = true,
                            VerticalExpand = true,
                            Children =
                            {
                                new BoxContainer
                                {
                                    Orientation = LayoutOrientation.Vertical,
                                    HorizontalExpand = true,
                                    VerticalExpand = true,
                                },
                            },
                        },
                    },
                };

                _traitsTabs.AddTab(uncategorized, Loc.GetString("trait-category-Uncategorized"));
            }

            // Create a Dictionary/tree of categories and subcategories
            var cats = CreateTree(_prototypeManager.EnumeratePrototypes<TraitCategoryPrototype>()
                .Where(c => c.Root)
                .OrderBy(c => Loc.GetString($"trait-category-{c.ID}"))
                .ToList());
            var categories = new Dictionary<string, object>();
            foreach (var (key, value) in cats)
                categories.Add(key, value);

            // Create the UI elements for the category tree
            CreateCategoryUI(categories, _traitsTabs);

            // Fill categories with traits
            foreach (var (trait, usable) in _traits
                .OrderBy(l => -l.Key.Points)
                .ThenBy(l => l.Key.ID)
                .ThenBy(l => Loc.GetString($"trait-name-{l.Key.ID}")))
            {
                if (_traitPreferences.Select(lps => lps.Trait.ID).Contains(trait.ID))
                {
                    var first = _traitPreferences.First(lps => lps.Trait.ID == trait.ID);
                    first.Valid = usable;
                    first.ShowUnusable = showUnusable;
                    continue;
                }

                var selector = new TraitPreferenceSelector(
                    trait, highJob, Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                    _entityManager, _prototypeManager, _configurationManager, _characterRequirementsSystem, _requirements);
                selector.Valid = usable;
                selector.ShowUnusable = showUnusable;
                AddSelector(selector);

                // Look for an existing category tab
                var match = FindCategory(trait.Category, _traitsTabs);

                // If there is no category put it in Uncategorized (this shouldn't happen)
                (match ?? uncategorized).Children.First().Children.First().AddChild(selector);
            }

            // Hide any empty tabs
            HideEmptyTabs(_prototypeManager.EnumeratePrototypes<TraitCategoryPrototype>().ToList());

            UpdateTraitPreferences();
            return;


            void CreateCategoryUI(Dictionary<string, object> tree, NeoTabContainer parent)
            {
                foreach (var (key, value) in tree)
                {
                    // If the category's container exists already, ignore it
                    if (parent.Contents.Any(c => c.Name == key))
                        continue;

                    // If the value is a list of TraitPrototypes, create a final tab for them
                    if (value is List<TraitPrototype>)
                    {
                        var category = new BoxContainer
                        {
                            Name = key,
                            Orientation = LayoutOrientation.Vertical,
                            HorizontalExpand = true,
                            VerticalExpand = true,
                            Children =
                            {
                                new ScrollContainer
                                {
                                    HScrollEnabled = false,
                                    HorizontalExpand = true,
                                    VerticalExpand = true,
                                    Children =
                                    {
                                        new BoxContainer
                                        {
                                            Orientation = LayoutOrientation.Vertical,
                                            HorizontalExpand = true,
                                            VerticalExpand = true,
                                        },
                                    },
                                },
                            },
                        };

                        parent.AddTab(category, Loc.GetString($"trait-category-{key}"));
                    }
                    // If the value is a dictionary, create a new tab for it and recursively call this function to fill it
                    else
                    {
                        var category = new NeoTabContainer
                        {
                            Name = key,
                            HorizontalExpand = true,
                            VerticalExpand = true,
                            SeparatorMargin = new Thickness(0),
                        };

                        parent.AddTab(category, Loc.GetString($"trait-category-{key}"));
                        CreateCategoryUI((Dictionary<string, object>) value, category);
                    }
                }
            }

            void AddSelector(TraitPreferenceSelector selector)
            {
                _traitPreferences.Add(selector);
                selector.PreferenceChanged += preference =>
                {
                    // Make sure they have enough trait points
                    preference = CheckPoints(preference ? selector.Trait.Points : -selector.Trait.Points, preference);
                    // Make sure they have enough trait slots
                    preference = preference ? _traitCount < _configurationManager.GetCVar(CCVars.GameTraitsMax) : preference;

                    // Update Preferences
                    Profile = Profile?.WithTraitPreference(selector.Trait.ID, preference);
                    IsDirty = true;
                    UpdateTraitPreferences();
                    UpdateCharacterRequired();
                };
            }

            bool CheckPoints(int points, bool preference)
            {
                var temp = _traitPointsBar.Value + points;
                return preference ? !(temp < 0) : temp < 0;
            }
        }

        #endregion

        #region Functions

        private Dictionary<string, object> CreateTree(List<TraitCategoryPrototype> cats)
        {
            var tree = new Dictionary<string, object>();
            foreach (var category in cats)
            {
                // If the category is already in the tree, ignore it
                if (tree.ContainsKey(category.ID))
                    continue;

                // Categories don't have a Parent field, so we need to instead check the SubCategories of every Category
                var subCategories = category.SubCategories.Where(subCategory => !tree.ContainsKey(subCategory)).ToList();
                // If there are no subcategories, add a loadout spot to the dictionary
                if (subCategories.Count == 0)
                {
                    tree.Add(category.ID, new List<TraitPrototype>());
                    continue;
                }

                // If there are subcategories, we need to add them to the dictionary as well
                var subCategoryTree = CreateTree(subCategories.Select(c => _prototypeManager.Index(c)).ToList());
                tree.Add(category.ID, subCategoryTree);
            }

            return tree;
        }

        private void HideEmptyTabs(List<TraitCategoryPrototype> cats)
        {
            foreach (var tab in cats.Select(category => FindCategory(category.ID, _traitsTabs)))
            {
                // If it's empty, hide it
                if (tab != null)
                    ((NeoTabContainer) tab.Parent!.Parent!.Parent!.Parent!).SetTabVisible(tab, tab.Children.First().Children.First().Children.Any());

                // If it has a parent tab container, hide it if it's empty
                if (tab?.Parent?.Parent is NeoTabContainer parent)
                {
                    var parentCats = parent.Contents.Select(c => _prototypeManager.Index<TraitCategoryPrototype>(c.Name!)).ToList();
                    HideEmptyTabs(parentCats);
                }
            }
        }

        private void TryRemoveUnusableTraits()
        {
            // Confirm the user wants to remove unusable loadouts
            if (!AdminUIHelpers.TryConfirm(_traitsRemoveUnusableButton, _confirmationData))
                return;

            // Remove unusable loadouts
            foreach (var (trait, _) in _traits.Where(l => !l.Value).ToList())
                Profile = Profile?.WithTraitPreference(trait.ID, false);
            UpdateCharacterRequired();
        }

        #endregion

        #endregion

        #region Loadouts

        #region Updates

        private void UpdateLoadoutPreferences()
        {
            var points = _configurationManager.GetCVar(CCVars.GameLoadoutsPoints);
            _loadoutPointsBar.Value = points;
            _loadoutPointsLabel.Text = Loc.GetString("humanoid-profile-editor-loadouts-points-label", ("points", points), ("max", points));

            foreach (var preferenceSelector in _loadoutPreferences)
            {
                var loadoutId = preferenceSelector.Loadout.ID;
                var preference = Profile?.LoadoutPreferences.Contains(loadoutId) ?? false;

                preferenceSelector.Preference = preference;

                if (preference)
                {
                    points -= preferenceSelector.Loadout.Cost;
                    _loadoutPointsBar.Value = points;
                    _loadoutPointsLabel.Text = Loc.GetString("humanoid-profile-editor-loadouts-points-label", ("points", points), ("max", _loadoutPointsBar.MaxValue));
                }
            }

            // Set the remove unusable button's label to have the correct amount of unusable loadouts
            _loadoutsRemoveUnusableButton.Text = Loc.GetString("humanoid-profile-editor-loadouts-remove-unusable-button",
                ("count", _loadouts
                    .Where(l => _loadoutPreferences
                        .Where(lps => lps.Preference).Select(lps => lps.Loadout).Contains(l.Key))
                    .Count(l => !l.Value
                        || !_loadoutPreferences.Find(lps => lps.Loadout == l.Key)!.Wearable)));
            AdminUIHelpers.RemoveConfirm(_loadoutsRemoveUnusableButton, _confirmationData);

            IsDirty = true;
            _controller.UpdateClothes = true;
            UpdatePreview();
        }

        private Dictionary<LoadoutPrototype, bool> _loadouts = new();
        private Dictionary<string, EntityUid> _dummyLoadouts = new();
        private void UpdateLoadouts(bool showUnusable)
        {
            // Reset loadout points so you don't get -14 points or something for no reason
            var points = _configurationManager.GetCVar(CCVars.GameLoadoutsPoints);
            _loadoutPointsLabel.Text = Loc.GetString("humanoid-profile-editor-loadouts-points-label", ("points", points), ("max", points));
            _loadoutPointsBar.MaxValue = points;
            _loadoutPointsBar.Value = points;


            // Get the highest priority job to use for loadout filtering
            var highJob = _controller.GetPreferredJob(Profile ?? HumanoidCharacterProfile.DefaultWithSpecies());

            _loadouts.Clear();
            foreach (var loadout in _prototypeManager.EnumeratePrototypes<LoadoutPrototype>())
            {
                var usable = _characterRequirementsSystem.CheckRequirementsValid(
                    loadout.Requirements,
                    highJob ?? new JobPrototype(),
                    Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                    _requirements.GetRawPlayTimeTrackers(),
                    _requirements.IsWhitelisted(),
                    loadout,
                    _entityManager,
                    _prototypeManager,
                    _configurationManager,
                    out _
                );
                _loadouts.Add(loadout, usable);

                if (_loadoutPreferences.FindIndex(lps => lps.Loadout.ID == loadout.ID) is not (not -1 and var i))
                    continue;

                var selector = _loadoutPreferences[i];
                UpdateSelector(selector, usable);
            }

            if (_loadouts.Count == 0)
            {
                _loadoutsTabs.AddTab(new Label { Text = Loc.GetString("humanoid-profile-editor-loadouts-no-loadouts") },
                    Loc.GetString("loadout-category-Uncategorized"));
                return;
            }


            var uncategorized = _loadoutsTabs.Contents.FirstOrDefault(c => c.Name == "Uncategorized");
            if (uncategorized == null)
            {
                uncategorized = new BoxContainer
                {
                    Name = "Uncategorized",
                    Orientation = LayoutOrientation.Vertical,
                    HorizontalExpand = true,
                    VerticalExpand = true,
                    // I hate ScrollContainers
                    Children =
                    {
                        new ScrollContainer
                        {
                            HScrollEnabled = false,
                            HorizontalExpand = true,
                            VerticalExpand = true,
                            Children =
                            {
                                new BoxContainer
                                {
                                    Orientation = LayoutOrientation.Vertical,
                                    HorizontalExpand = true,
                                    VerticalExpand = true,
                                },
                            },
                        },
                    },
                };

                _loadoutsTabs.AddTab(uncategorized, Loc.GetString("loadout-category-Uncategorized"));
            }

            // Create a Dictionary/tree of categories and subcategories
            var cats = CreateTree(_prototypeManager.EnumeratePrototypes<LoadoutCategoryPrototype>()
                .Where(c => c.Root)
                .OrderBy(c => Loc.GetString($"loadout-category-{c.ID}"))
                .ToList());
            var categories = new Dictionary<string, object>();
            foreach (var (key, value) in cats)
                categories.Add(key, value);

            // Create the UI elements for the category tree
            CreateCategoryUI(categories, _loadoutsTabs);

            // Fill categories with loadouts
            foreach (var (loadout, usable) in _loadouts
                .OrderBy(l => l.Key.ID)
                .ThenBy(l => Loc.GetString($"loadout-name-{l.Key.ID}"))
                .ThenBy(l => l.Key.Cost))
            {
                if (_loadoutPreferences.Select(lps => lps.Loadout.ID).Contains(loadout.ID))
                {
                    var first = _loadoutPreferences.First(lps => lps.Loadout.ID == loadout.ID);
                    UpdateSelector(first, usable);
                    continue;
                }

                var selector = new LoadoutPreferenceSelector(
                    loadout, highJob ?? new JobPrototype(),
                    Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(), ref _dummyLoadouts,
                    _entityManager, _prototypeManager, _configurationManager, _characterRequirementsSystem, _requirements);
                UpdateSelector(selector, usable);
                AddSelector(selector);

                // Look for an existing category tab
                var match = FindCategory(loadout.Category, _loadoutsTabs);

                // If there is no category put it in Uncategorized (this shouldn't happen)
                (match ?? uncategorized).Children.First().Children.First().AddChild(selector);
            }

            // Hide any empty tabs
            HideEmptyTabs(_prototypeManager.EnumeratePrototypes<LoadoutCategoryPrototype>().ToList());

            UpdateLoadoutPreferences();
            return;


            void UpdateSelector(LoadoutPreferenceSelector selector, bool usable)
            {
                selector.Valid = usable;
                selector.ShowUnusable = showUnusable;

                if (_controller.GetPreviewDummy() is not { } dummy)
                    return;
                foreach (var item in selector.Loadout.Items)
                {
                    if (_dummyLoadouts.TryGetValue(selector.Loadout.ID + selector.Loadout.Items.IndexOf(item), out var entity)
                        && _entityManager.GetComponent<MetaDataComponent>(entity).EntityPrototype!.ID == item)
                    {
                        if (!_entityManager.HasComponent<ClothingComponent>(entity))
                        {
                            selector.Wearable = true;
                            continue;
                        }
                        selector.Wearable = _characterRequirementsSystem.CanEntityWearItem(dummy, entity);
                        continue;
                    }

                    entity = _entityManager.SpawnEntity(item, MapCoordinates.Nullspace);
                    _dummyLoadouts[selector.Loadout.ID + selector.Loadout.Items.IndexOf(item)] = entity;

                    if (!_entityManager.HasComponent<ClothingComponent>(entity))
                    {
                        selector.Wearable = true;
                        continue;
                    }
                    selector.Wearable = _characterRequirementsSystem.CanEntityWearItem(dummy, entity);
                }
            }

            void CreateCategoryUI(Dictionary<string, object> tree, NeoTabContainer parent)
            {
                foreach (var (key, value) in tree)
                {
                    // If the category's container exists already, ignore it
                    if (parent.Contents.Any(c => c.Name == key))
                        continue;

                    // If the value is a list of LoadoutPrototypes, create a final tab for them
                    if (value is List<LoadoutPrototype>)
                    {
                        var category = new BoxContainer
                        {
                            Name = key,
                            Orientation = LayoutOrientation.Vertical,
                            HorizontalExpand = true,
                            VerticalExpand = true,
                            Children =
                            {
                                new ScrollContainer
                                {
                                    HScrollEnabled = false,
                                    HorizontalExpand = true,
                                    VerticalExpand = true,
                                    Children =
                                    {
                                        new BoxContainer
                                        {
                                            Orientation = LayoutOrientation.Vertical,
                                            HorizontalExpand = true,
                                            VerticalExpand = true,
                                        },
                                    },
                                },
                            },
                        };

                        parent.AddTab(category, Loc.GetString($"loadout-category-{key}"));
                    }
                    // If the value is a dictionary, create a new tab for it and recursively call this function to fill it
                    else
                    {
                        var category = new NeoTabContainer
                        {
                            Name = key,
                            HorizontalExpand = true,
                            VerticalExpand = true,
                            SeparatorMargin = new Thickness(0),
                        };

                        parent.AddTab(category, Loc.GetString($"loadout-category-{key}"));
                        CreateCategoryUI((Dictionary<string, object>) value, category);
                    }
                }
            }

            void AddSelector(LoadoutPreferenceSelector selector)
            {
                _loadoutPreferences.Add(selector);
                selector.PreferenceChanged += preference =>
                {
                    // Make sure they have enough loadout points
                    preference = preference ? CheckPoints(-selector.Loadout.Cost, preference) : CheckPoints(selector.Loadout.Cost, preference);

                    // Update Preferences
                    Profile = Profile?.WithLoadoutPreference(selector.Loadout.ID, preference);
                    IsDirty = true;
                    UpdateLoadoutPreferences();
                    UpdateCharacterRequired();
                };
            }

            bool CheckPoints(int points, bool preference)
            {
                var temp = _loadoutPointsBar.Value + points;
                return preference ? !(temp < 0) : temp < 0;
            }
        }

        #endregion

        #region Functions

        private Dictionary<string, object> CreateTree(List<LoadoutCategoryPrototype> cats)
        {
            var tree = new Dictionary<string, object>();
            foreach (var category in cats)
            {
                // If the category is already in the tree, ignore it
                if (tree.ContainsKey(category.ID))
                    continue;

                // Categories don't have a Parent field, so we need to instead check the SubCategories of every Category
                var subCategories = category.SubCategories.Where(subCategory => !tree.ContainsKey(subCategory)).ToList();
                // If there are no subcategories, add a loadout spot to the dictionary
                if (subCategories.Count == 0)
                {
                    tree.Add(category.ID, new List<LoadoutPrototype>());
                    continue;
                }

                // If there are subcategories, we need to add them to the dictionary as well
                var subCategoryTree = CreateTree(subCategories.Select(c => _prototypeManager.Index(c)).ToList());
                tree.Add(category.ID, subCategoryTree);
            }

            return tree;
        }

        private BoxContainer? FindCategory(string id, NeoTabContainer parent)
        {
            BoxContainer? match = null;
            foreach (var child in parent.Contents)
            {
                if (string.IsNullOrEmpty(child.Name))
                    continue;

                if (child.Name == id)
                    match = (BoxContainer?) child;
            }

            if (match != null)
                return match;

            foreach (var subcategory in parent.Contents.Where(c => c is NeoTabContainer).Cast<NeoTabContainer>())
                match = FindCategory(id, subcategory);

            return match;
        }

        private void HideEmptyTabs(List<LoadoutCategoryPrototype> cats)
        {
            foreach (var tab in cats.Select(category => FindCategory(category.ID, _loadoutsTabs)))
            {
                // If it's empty, hide it
                if (tab != null)
                    ((NeoTabContainer) tab.Parent!.Parent!.Parent!.Parent!).SetTabVisible(tab, tab.Children.First().Children.First().Children.Any());

                // If it has a parent tab container, hide it if it's empty
                if (tab?.Parent?.Parent is NeoTabContainer parent)
                {
                    var parentCats = parent.Contents.Select(c => _prototypeManager.Index<LoadoutCategoryPrototype>(c.Name!)).ToList();
                    HideEmptyTabs(parentCats);
                }
            }
        }

        private void TryRemoveUnusableLoadouts()
        {
            // Confirm the user wants to remove unusable loadouts
            if (!AdminUIHelpers.TryConfirm(_loadoutsRemoveUnusableButton, _confirmationData))
                return;

            // Remove unusable and unwearable loadouts
            foreach (var (loadout, _) in
                _loadouts.Where(l =>
                    !l.Value || !_loadoutPreferences.Find(lps => lps.Loadout.ID == l.Key.ID)!.Wearable).ToList())
                Profile = Profile?.WithLoadoutPreference(loadout.ID, false);
            UpdateCharacterRequired();
        }

        #endregion

        #endregion

        private void UpdateCharacterRequired()
        {
            UpdateRoleRequirements();
            UpdateTraits(_traitsShowUnusableButton.Pressed);
            UpdateLoadouts(_loadoutsShowUnusableButton.Pressed);
        }
    }
}
