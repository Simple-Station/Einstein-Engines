using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared.Backmen.ModSuits;
using Content.Shared.Backmen.ModSuits.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Backmen.ModSuits.UI;

[GenerateTypedNameReferences]
public sealed partial class ModSuitMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;

    [UISystemDependency] private readonly SharedAppearanceSystem _appearanceSystem;

    public Action? EjectBatteryButtonPressed;

    public Action<EntityUid>? ToggleModuleButtonPressed;
    public Action<EntityUid>? PartToggleModulesButtonPressed;

    private List<EntityUid> _modules = new();

    public EntityUid Entity;

    public EntityUid? ChosenModule;
    public EntityUid? PreviewEntity;

    public ModSuitMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _appearanceSystem = _entity.System<SharedAppearanceSystem>();

        EjectBatteryButton.OnPressed += _ => EjectBatteryButtonPressed?.Invoke();
    }

    public void SetEntity(EntityUid entity)
    {
        Entity = entity;
    }

    public void UpdateState(ModSuitBuiState state)
    {
        ChargeBar.Value = state.ChargePercent;
        ChargeLabel.Text = Loc.GetString("mod-suit-ui-charge-label",
            ("charge", (int) MathF.Round(state.ChargePercent * 100)));

        UpdateModulePanel(state);
    }

    private void UpdateModulePanel(ModSuitBuiState state)
    {
        if (!_entity.TryGetComponent(Entity, out ModSuitComponent? component))
            return;

        ComplexityCounter.Text = Loc.GetString("mod-suit-complexity-counter",
            ("actual", state.CurrentComplexity),
            ("max", component.MaxComplexity));

        if (_appearanceSystem.TryGetData<ModSuitVisualizerGroupData>(Entity,
                ModSuitVisualizerKeys.ClothingPieces,
                out var clothingContainer))
        {
            PiecesContainer.Children.Clear();
            foreach (var attached in clothingContainer.PieceList.Select(_entity.GetEntity))
            {
                var control = new ModSuitPieceControl(attached, _entity);

                control.PieceButtonPressed += () =>
                {
                    PartToggleModulesButtonPressed?.Invoke(attached);
                };

                PiecesContainer.AddChild(control);
            }
        }

        if (state.Modules.Count == _modules.Count)
        {
            if (state.Modules.Select(pair => _entity.GetEntity(pair.Item1)).All(module => _modules.Contains(module)))
                return;
        }

        ModuleContainer.Children.Clear();
        _modules.Clear();
        foreach (var module in state.Modules)
        {
            var ent = _entity.GetEntity(module.Item1);
            var moduleComponent = _entity.GetComponent<ModSuitModComponent>(ent);

            var piece = Entity;
            if (_appearanceSystem.TryGetData<ModSuitVisualizerGroupData>(Entity,
                    ModSuitVisualizerKeys.ClothingPieces,
                    out var attachedPieces))
            {
                foreach (var attachedEnt in attachedPieces.PieceList.Select(_entity.GetEntity))
                {
                    if (!_entity.TryGetComponent<ModAttachedClothingComponent>(attachedEnt, out var attachedComp))
                        continue;

                    if (moduleComponent.Slot != attachedComp.Slot)
                        continue;

                    piece = attachedEnt;
                    break;
                }
            }

            var control = new ModSuitModuleControl(ent, _entity, moduleComponent.ModComplexity, module.Item2, piece);
            control.OnModuleChosen += () =>
            {
                UpdateChosenModule(ent);
            };

            ModuleContainer.AddChild(control);
            _modules.Add(ent);
        }
    }

    private void UpdateChosenModule(EntityUid module)
    {
        ChosenModule = module;
        if (PreviewEntity != null)
            _entity.QueueDeleteEntity(PreviewEntity);

        // it does not exist for some reason
        var previewEnt = _entity.Spawn(_entity.GetComponent<MetaDataComponent>(module).EntityPrototype!.ID);
        PreviewEntity = previewEnt;

        CurrentModuleView.SetEntity(PreviewEntity);
        ChosenModuleName.Text = _entity.GetComponent<MetaDataComponent>(module).EntityName;

        ChosenPassiveConsumption.Text = Loc.GetString("mod-suit-module-passive-consumption"/*, ("consumption", passiveConsumption)*/);
        ChosenActiveConsumption.Text = Loc.GetString("mod-suit-module-active-consumption"/*, ("consumption", activeConsumption)*/);

        ToggleModButton.OnPressed += _ =>
        {
            ToggleModuleButtonPressed?.Invoke(ChosenModule!.Value);
        };

        ChosenModuleData.Visible = true;
        CurrentModuleView.Visible = true;
        ToggleModButton.Visible = true;
    }
}
