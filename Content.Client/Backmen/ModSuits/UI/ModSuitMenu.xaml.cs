using System.Linq;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Backmen.ModSuits;
using Content.Shared.Backmen.ModSuits.Components;
using Content.Shared.NameIdentifier;
using Content.Shared.Preferences;
using Content.Shared.Silicons.Borgs;
using Content.Shared.Silicons.Borgs.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.Backmen.ModSuits.UI;

[GenerateTypedNameReferences]
public sealed partial class ModSuitMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;

    public Action? EjectBatteryButtonPressed;

    public float AccumulatedTime;
    private List<EntityUid> _modules = new();

    public EntityUid Entity;

    public ModSuitMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        EjectBatteryButton.OnPressed += _ => EjectBatteryButtonPressed?.Invoke();
    }

    public void SetEntity(EntityUid entity)
    {
        Entity = entity;
        UserViewSprite.SetEntity(entity);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        AccumulatedTime += args.DeltaSeconds;
        UserViewSprite.OverrideDirection = (Direction) ((int) AccumulatedTime % 4 * 2);
    }

    public void UpdateState(ModSuitBuiState state)
    {
        EjectBatteryButton.Disabled = !state.HasBattery;
        ChargeBar.Value = state.ChargePercent;
        ChargeLabel.Text = Loc.GetString("mod-suit-ui-charge-label",
            ("charge", (int) MathF.Round(state.ChargePercent * 100)));

        UpdateModulePanel(state);
    }

    private void UpdateModulePanel(ModSuitBuiState state)
    {
        if (!_entity.TryGetComponent(Entity, out ModSuitComponent? component))
            return;

        ComplexityCounter.Text = Loc.GetString("mod-suit-complexity-counter",
            ("actual", component.CurrentComplexity),
            ("max", component.MaxComplexity));

        if (state.Modules.Count == _modules.Count)
        {
            if (state.Modules.Select(_entity.GetEntity).All(module => _modules.Contains(module)))
                return;
        }

        ModuleContainer.Children.Clear();
        _modules.Clear();
        foreach (var module in state.Modules.Select(_entity.GetEntity))
        {
            var moduleComponent = _entity.GetComponent<ModSuitModComponent>(module);

            // TODO: make list module control yeah!1111
            //var control = bruh

            //ModuleContainer.AddChild(control);
            _modules.Add(module);
        }
    }
}
