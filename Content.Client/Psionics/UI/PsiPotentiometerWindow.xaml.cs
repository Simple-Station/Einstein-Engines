using Content.Client.UserInterface.Controls;
using Content.Shared.IdentityManagement;
using Content.Shared.Psionics;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using System.Text;


namespace Content.Client.Psionics.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class PsiPotentiometerWindow : FancyWindow
    {
        private readonly IEntityManager _entityManager;
        private const int LightHeight = 150;
        private const int LightWidth = 900;

        public PsiPotentiometerWindow()
        {
            RobustXamlLoader.Load(this);

            var dependencies = IoCManager.Instance!;
            _entityManager = dependencies.Resolve<IEntityManager>();
        }
        public void Diagnose(PsiPotentiometerUserMessage msg)
        {
            var target = _entityManager.GetEntity(msg.TargetEntity);

            if (target == null)
            {
                NoPsionicDataText.Visible = true;
                ExamDataLabel.Text = string.Empty;
                return;
            }

            NoPsionicDataText.Visible = false;


            string entityName = Loc.GetString("psi-potentiometer-window-entity-unknown-text");
            if (_entityManager.HasComponent<MetaDataComponent>(target.Value))
                entityName = Identity.Name(target.Value, _entityManager);

            var sb = new StringBuilder();
            sb.AppendLine(Loc.GetString("psi-potentiometer-window-entity-name", ("entityName", entityName)));

            if (msg.MetapsionicFeedback is not null)
                foreach (var feedback in msg.MetapsionicFeedback)
                    sb.AppendLine(Loc.GetString(feedback));

            ExamDataLabel.Text = sb.ToString();

            SetHeight = LightHeight;
            SetWidth = LightWidth;
        }
    }
}